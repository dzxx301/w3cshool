数据封装、继承和多态只是面向对象程序设计中最基础的3个概念。
在Python中，面向对象还有很多高级特性，允许我们写出非常强大的功能。
1.在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，
  新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。

2.静态语言 vs 动态语言
        对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，
    否则，将无法调用run()方法。
        对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：

class Timer(object):
    def run(self):
        print('Start...')
        这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，
    那它就可以被看做是鸭子。
        Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。
    但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，
    你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。
3.获取对象信息
一、使用type（）函数
    使用type()函数，可以获取任何数据的类型。如果要判断一个数据是不是函数，
    可以使用types模块中定义的常量，如：types.FunctionType、types.LambdaType。
二、使用isinstance（）函数
    isinstance函数判断的是一个对象是否是该类型或位于该类型的父类继承链上。
    isinstance还可以判断一个变量是否是某些类型的一种，用元组写多种类型。
三、使用dir（）函数
    1.如果要获得一个对象全部的属性和方法，可以使用dir（）函数。它返回一个包含 字符串的list。
    2.类似“__xxx__”的属性和方法在Python中都是有特殊用途的，比如len()函数获取对象的长度。
    但实际上，在len函数内部它会去自动调用对象的__len__()方法，所以，你可以在类中自己设定一个__len__()方法，
    让len返回你想要返回的长度。
四、操作一个对象状态
    如getattr() 获取、setattr() 设置 和hasattr() 有没有 方法，可以直接操作一个对象的状态。
    hasattr(obj,'x') #有属性‘x’吗？
    setattr(obj,'y',18) #设置一个属性‘y’，值为18.
    getattr(obj,'y') #获取属性y
    getattr(obj,'z',404) #获取属性z，如果不存在，就返回默认值404.